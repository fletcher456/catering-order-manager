digraph MenuParsingArchitecture {
    // Graph configuration
    rankdir=TB;
    fontname="Arial";
    fontsize=14;
    node [fontname="Arial", fontsize=12, shape=box, style=filled];
    edge [fontname="Arial", fontsize=10];
    
    // Color scheme for different components
    subgraph cluster_optimization_engine {
        label="Adaptive Bayesian Optimization Engine";
        style=filled;
        fillcolor=gold;
        
        parameter_space [label="Parameter Space Definition\n• Phase 0-3 parameter bounds\n• Constraint definitions\n• Multi-objective weights", fillcolor=yellow];
        gaussian_process [label="Gaussian Process Model\n• RBF/Matern kernels\n• Hyperparameter learning\n• Uncertainty quantification", fillcolor=yellow];
        acquisition_function [label="Acquisition Function\n• Expected Improvement\n• Upper Confidence Bound\n• Probability Improvement", fillcolor=yellow];
        exploration_scheduler [label="Exploration Weight Scheduler\n• Temperature-like control\n• Exponential/Cosine decay\n• Adaptive cooling", fillcolor=yellow];
        convergence_detector [label="Convergence Detection\n• Quality improvement tracking\n• Stability analysis\n• Early stopping", fillcolor=yellow];
    }
    
    subgraph cluster_user_interaction {
        label="User Interaction Layer";
        style=filled;
        fillcolor=lightblue;
        
        user_upload [label="PDF Upload\n(Drag & Drop)", fillcolor=lightgreen];
        file_validation [label="File Validation\n• Size limits\n• PDF format check", fillcolor=white];
        progress_display [label="Progress Display\n• Real-time logging\n• Optimization progress\n• Step tracking", fillcolor=white];
        results_display [label="Results Display\n• Menu items list\n• Region thumbnails\n• Optimization metrics", fillcolor=white];
        optimization_control [label="Optimization Control\n• Mode selection\n• Parameter overrides\n• Trade-off preferences", fillcolor=white];
    }
    
    subgraph cluster_pdf_processing {
        label="PDF Processing Pipeline";
        style=filled;
        fillcolor=lightyellow;
        
        pdf_loader [label="PDF Loader\n• ArrayBuffer conversion\n• PDF.js initialization\n• Local worker setup", fillcolor=white];
        
        subgraph cluster_text_extraction {
            label="Text Extraction Phase";
            style=filled;
            fillcolor=lightgray;
            
            page_iterator [label="Page Iterator\n• Multi-page processing\n• Viewport calculation", fillcolor=white];
            text_content_extract [label="Text Content Extraction\n• PDF.js getTextContent()\n• Coordinate preservation\n• Typography metadata", fillcolor=white];
            typography_enhancement [label="Typography Enhancement\n• Font weight extraction\n• Font style identification\n• Metadata enrichment", fillcolor=white];
        }
    }
    
    subgraph cluster_heuristic_analysis {
        label="Phase 0: Heuristic Analysis Engine";
        style=filled;
        fillcolor=lightcoral;
        
        number_classifier [label="Number Classification System\n• Price pattern detection\n• Calorie identification\n• Measurement extraction\n• Count vs item number\n• Economic clustering", fillcolor=white];
        
        typography_fingerprinting [label="Typography Fingerprinting\n• Font family grouping\n• Size clustering\n• Weight consistency\n• Style pattern analysis", fillcolor=white];
        
        pattern_extraction [label="Pattern Extraction\n• Common menu vocabulary\n• Structural templates\n• Document consistency\n• Fractal analysis", fillcolor=white];
    }
    
    subgraph cluster_spatial_clustering {
        label="Phase 1: Spatial Clustering Algorithm";
        style=filled;
        fillcolor=lightsteelblue;
        
        coordinate_sorting [label="Coordinate Sorting\n• Y-axis grouping\n• Top-to-bottom processing", fillcolor=white];
        
        horizontal_banding [label="Horizontal Band Formation\n• Y-proximity clustering\n• 1.5em tolerance threshold\n• Band validation", fillcolor=white];
        
        region_clustering [label="Region Clustering\n• X-proximity analysis\n• 6em distance threshold\n• Rectangular boundary detection", fillcolor=white];
        
        confidence_scoring [label="Confidence Scoring\n• Text length variety\n• Price pattern presence\n• Typography consistency\n• Spatial coherence", fillcolor=white];
    }
    
    subgraph cluster_region_processing {
        label="Phase 2: Region Processing & Validation";
        style=filled;
        fillcolor=lightseagreen;
        
        region_filtering [label="Region Filtering\n• Confidence thresholds\n• Size constraints\n• Content validation", fillcolor=white];
        
        heuristic_validation [label="Heuristic Validation\n• Triple identification\n• Name length checks\n• Description complexity\n• Price reasonableness", fillcolor=white];
        
        image_extraction [label="PDF Region Extraction\n• Canvas rendering\n• Coordinate transformation\n• High-resolution capture\n• Base64 encoding", fillcolor=white];
    }
    
    subgraph cluster_menu_item_assembly {
        label="Phase 3: Menu Item Assembly & Validation";
        style=filled;
        fillcolor=lightpink;
        
        subgraph cluster_bootstrapping {
            label="Bootstrapping Phase";
            style=filled;
            fillcolor=lavenderblush;
            
            bootstrap_check [label="Bootstrap Assessment\n• Low extraction count\n• Confidence threshold\n• Coverage analysis", fillcolor=white];
            
            fallback_processing [label="Fallback Text Processing\n• Traditional line parsing\n• Pattern matching\n• Basic triple extraction", fillcolor=white];
            
            bootstrap_reprocessing [label="Bootstrap Reprocessing\n• Merge fallback items\n• Apply heuristic validation\n• Extract enhanced patterns", fillcolor=white];
            
            convergence_analysis [label="Convergence Analysis\n• Quality improvement\n• Pattern consistency\n• Stability metrics", fillcolor=white];
        }
        
        triple_parsing [label="Triple Parsing\n• Name extraction\n• Description assembly\n• Price identification\n• Category assignment", fillcolor=white];
        
        document_validation [label="Document-wide Validation\n• Name uniqueness\n• Price distribution\n• Economic clustering\n• Outlier detection", fillcolor=white];
        
        pattern_refinement [label="Pattern Refinement\n• Template enhancement\n• Heuristic tuning\n• Fractal propagation", fillcolor=white];
        
        deduplication [label="Deduplication\n• Name similarity\n• Content comparison\n• Confidence ranking", fillcolor=white];
    }
    
    subgraph cluster_catering_interface {
        label="Catering Order Interface";
        style=filled;
        fillcolor=wheat;
        
        guest_count_input [label="Guest Count Input\n• Number validation\n• Serving calculations", fillcolor=white];
        
        quantity_recommendations [label="Quantity Recommendations\n• Per-guest calculations\n• Category-based logic\n• Serving size estimates", fillcolor=white];
        
        interactive_sliders [label="Interactive Sliders\n• Real-time updates\n• Cost calculations\n• Visual feedback", fillcolor=white];
        
        order_summary [label="Order Summary\n• Total calculations\n• Export options\n• Print formatting", fillcolor=white];
    }
    
    // Data structures and interfaces
    subgraph cluster_data_structures {
        label="Core Data Structures";
        style=filled;
        fillcolor=thistle;
        
        text_item [label="TextItem Interface\n• Spatial coordinates\n• Typography metadata\n• Content strings", fillcolor=white];
        
        menu_region [label="MenuRegion Interface\n• Bounding boxes\n• Confidence scores\n• Item collections", fillcolor=white];
        
        number_classification [label="NumberClassification\n• Value types\n• Confidence levels\n• Reasoning chains", fillcolor=white];
        
        typography_fingerprint [label="TypographyFingerprint\n• Font characteristics\n• Pattern libraries\n• Consistency metrics", fillcolor=white];
        
        menu_item [label="MenuItem Interface\n• Triple components\n• Visual validation\n• Metadata enrichment", fillcolor=white];
        
        catering_order [label="CateringOrder Interface\n• Guest calculations\n• Quantity management\n• Cost aggregation", fillcolor=white];
    }
    
    // Error handling and logging
    subgraph cluster_error_handling {
        label="Error Handling & Logging";
        style=filled;
        fillcolor=mistyrose;
        
        logging_system [label="Logging System\n• Real-time feedback\n• Progress tracking\n• Error reporting", fillcolor=white];
        
        error_recovery [label="Error Recovery\n• Graceful degradation\n• Fallback mechanisms\n• User notification", fillcolor=white];
        
        validation_feedback [label="Validation Feedback\n• Confidence visualization\n• Quality metrics\n• Accuracy indicators", fillcolor=white];
    }
    
    // Flow connections - Optimization Engine
    user_upload -> parameter_space;
    parameter_space -> gaussian_process;
    gaussian_process -> acquisition_function;
    acquisition_function -> exploration_scheduler;
    exploration_scheduler -> convergence_detector;
    
    // Optimization control flows
    optimization_control -> exploration_scheduler [label="user preferences", color=gold];
    convergence_detector -> results_display [label="optimization metrics", color=gold];
    
    // Parameter control flows to all phases
    exploration_scheduler -> number_classifier [label="Phase 0 params", color=gold, style=bold];
    exploration_scheduler -> coordinate_sorting [label="Phase 1 params", color=gold, style=bold];
    exploration_scheduler -> region_filtering [label="Phase 2 params", color=gold, style=bold];
    exploration_scheduler -> bootstrap_check [label="Phase 3 params", color=gold, style=bold];
    
    // Performance feedback to optimization
    deduplication -> gaussian_process [label="performance evaluation", color=gold, style=bold];
    
    // Flow connections - User Interaction
    user_upload -> file_validation;
    file_validation -> pdf_loader;
    
    // Flow connections - PDF Processing
    pdf_loader -> page_iterator;
    page_iterator -> text_content_extract;
    text_content_extract -> typography_enhancement;
    
    // Flow connections - Heuristic Analysis
    typography_enhancement -> number_classifier;
    typography_enhancement -> typography_fingerprinting;
    number_classifier -> pattern_extraction;
    typography_fingerprinting -> pattern_extraction;
    
    // Flow connections - Spatial Clustering
    pattern_extraction -> coordinate_sorting;
    coordinate_sorting -> horizontal_banding;
    horizontal_banding -> region_clustering;
    region_clustering -> confidence_scoring;
    
    // Flow connections - Region Processing
    confidence_scoring -> region_filtering;
    region_filtering -> heuristic_validation;
    heuristic_validation -> image_extraction;
    
    // Flow connections - Menu Item Assembly with Bootstrapping
    image_extraction -> triple_parsing;
    triple_parsing -> document_validation;
    document_validation -> bootstrap_check;
    
    // Bootstrapping flow
    bootstrap_check -> fallback_processing [label="if low quality"];
    bootstrap_check -> deduplication [label="if sufficient"];
    fallback_processing -> bootstrap_reprocessing;
    bootstrap_reprocessing -> convergence_analysis;
    convergence_analysis -> pattern_refinement;
    
    // Convergence loops
    pattern_refinement -> triple_parsing [style=dashed, color=purple, label="enhanced patterns"];
    convergence_analysis -> bootstrap_check [style=dashed, color=purple, label="retry assessment"];
    
    // Final output
    pattern_refinement -> deduplication;
    convergence_analysis -> deduplication [label="if converged"];
    
    // Flow connections - Catering Interface
    deduplication -> results_display;
    results_display -> guest_count_input;
    guest_count_input -> quantity_recommendations;
    quantity_recommendations -> interactive_sliders;
    interactive_sliders -> order_summary;
    
    // Data structure relationships
    text_content_extract -> text_item [style=dotted, color=blue];
    confidence_scoring -> menu_region [style=dotted, color=blue];
    number_classifier -> number_classification [style=dotted, color=blue];
    typography_fingerprinting -> typography_fingerprint [style=dotted, color=blue];
    triple_parsing -> menu_item [style=dotted, color=blue];
    order_summary -> catering_order [style=dotted, color=blue];
    
    // Logging and error handling connections
    pdf_loader -> logging_system [style=dashed, color=red];
    heuristic_validation -> logging_system [style=dashed, color=red];
    triple_parsing -> logging_system [style=dashed, color=red];
    
    pdf_loader -> error_recovery [style=dashed, color=red];
    image_extraction -> error_recovery [style=dashed, color=red];
    
    confidence_scoring -> validation_feedback [style=dashed, color=green];
    heuristic_validation -> validation_feedback [style=dashed, color=green];
    results_display -> validation_feedback [style=dashed, color=green];
    
    // Progress tracking
    page_iterator -> progress_display [style=dotted, color=orange];
    pattern_extraction -> progress_display [style=dotted, color=orange];
    region_filtering -> progress_display [style=dotted, color=orange];
    deduplication -> progress_display [style=dotted, color=orange];
    
    // Cross-validation and feedback loops
    heuristic_validation -> pattern_extraction [style=dashed, color=purple, label="pattern refinement"];
    document_validation -> typography_fingerprinting [style=dashed, color=purple, label="consistency feedback"];
    
    // Fractal self-similarity connections
    pattern_extraction -> heuristic_validation [style=bold, color=darkgreen, label="fractal templates"];
    typography_fingerprinting -> confidence_scoring [style=bold, color=darkgreen, label="consistency metrics"];
    number_classification -> triple_parsing [style=bold, color=darkgreen, label="type validation"];
    
    // Bootstrapping fractal feedback
    bootstrap_reprocessing -> pattern_extraction [style=bold, color=darkgreen, label="bootstrap patterns"];
    pattern_refinement -> typography_fingerprinting [style=bold, color=darkgreen, label="refined fingerprints"];
    convergence_analysis -> number_classification [style=bold, color=darkgreen, label="classification tuning"];
    
    // Legend
    subgraph cluster_legend {
        label="Legend";
        style=filled;
        fillcolor=white;
        
        legend_flow [label="Data Flow", shape=plaintext];
        legend_data [label="Data Structure", shape=plaintext];
        legend_error [label="Error Handling", shape=plaintext];
        legend_progress [label="Progress Tracking", shape=plaintext];
        legend_feedback [label="Cross-validation", shape=plaintext];
        legend_fractal [label="Fractal Self-similarity", shape=plaintext];
        legend_optimization [label="Bayesian Optimization", shape=plaintext];
        
        legend_flow -> legend_data [style=dotted, color=blue];
        legend_data -> legend_error [style=dashed, color=red];
        legend_error -> legend_progress [style=dotted, color=orange];
        legend_progress -> legend_feedback [style=dashed, color=purple];
        legend_feedback -> legend_fractal [style=bold, color=darkgreen];
        legend_fractal -> legend_optimization [style=bold, color=gold];
    }
}